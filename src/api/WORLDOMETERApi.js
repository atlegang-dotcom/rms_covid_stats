/*
 * RMS_covid_stats_cal
 * returns covid data, such as daily confirmed cases, total deaths, total active cases, total cases, etc.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/WorldometerCountry', 'model/WorldometerGlobal'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/WorldometerCountry'), require('../model/WorldometerGlobal'));
  } else {
    // Browser globals (root is window)
    if (!root.RmsCovidStatsCal) {
      root.RmsCovidStatsCal = {};
    }
    root.RmsCovidStatsCal.WORLDOMETERApi = factory(root.RmsCovidStatsCal.ApiClient, root.RmsCovidStatsCal.WorldometerCountry, root.RmsCovidStatsCal.WorldometerGlobal);
  }
}(this, function(ApiClient, WorldometerCountry, WorldometerGlobal) {
  'use strict';

  /**
   * WORLDOMETER service.
   * @module api/WORLDOMETERApi
   * @version 1.0.0
   */

  /**
   * Constructs a new WORLDOMETERApi. 
   * @alias module:api/WORLDOMETERApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the v3StatsWorldometerCountryGet operation.
     * @callback module:api/WORLDOMETERApi~v3StatsWorldometerCountryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorldometerCountry>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns data of all countries or specific country by countryCode
     * @param {String} countryCode 
     * @param {module:api/WORLDOMETERApi~v3StatsWorldometerCountryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorldometerCountry>}
     */
    this.v3StatsWorldometerCountryGet = function(countryCode, callback) {
      var postBody = null;

      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling v3StatsWorldometerCountryGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'countryCode': countryCode,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [WorldometerCountry];

      return this.apiClient.callApi(
        '/v3/stats/worldometer/country', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v3StatsWorldometerGlobalGet operation.
     * @callback module:api/WORLDOMETERApi~v3StatsWorldometerGlobalGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorldometerGlobal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all data of all countries
     * @param {module:api/WORLDOMETERApi~v3StatsWorldometerGlobalGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorldometerGlobal}
     */
    this.v3StatsWorldometerGlobalGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = WorldometerGlobal;

      return this.apiClient.callApi(
        '/v3/stats/worldometer/global', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
